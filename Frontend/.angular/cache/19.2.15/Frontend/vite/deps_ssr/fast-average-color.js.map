{
  "version": 3,
  "sources": ["../../../../../../node_modules/fast-average-color/dist/index.esm.js"],
  "sourcesContent": ["/*! Fast Average Color | Â© 2025 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n  var str = num.toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n  return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n  // http://www.w3.org/TR/AERT#color-contrast\n  var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n  return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n  if (!color) {\n    return [];\n  }\n  return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n  return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n  for (var i = 0; i < ignoredColor.length; i++) {\n    if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n  switch (ignoredColor.length) {\n    case 3:\n      // [red, green, blue]\n      if (isIgnoredRGBColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 4:\n      // [red, green, blue, alpha]\n      if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 5:\n      // [red, green, blue, alpha, threshold]\n      if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    default:\n      return false;\n  }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n  // Ignore if the pixel are transparent.\n  if (data[index + 3] !== 255) {\n    return true;\n  }\n  if (data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2]) {\n    return true;\n  }\n  return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n  if (data[index + 3] && ignoredColor[3]) {\n    return data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2] && data[index + 3] === ignoredColor[3];\n  }\n  // Ignore rgb components if the pixel are fully transparent.\n  return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n  return colorComponent >= ignoredColorComponent - value && colorComponent <= ignoredColorComponent + value;\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n  var redIgnored = ignoredColor[0];\n  var greenIgnored = ignoredColor[1];\n  var blueIgnored = ignoredColor[2];\n  var alphaIgnored = ignoredColor[3];\n  var threshold = ignoredColor[4];\n  var alphaData = data[index + 3];\n  var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n  if (!alphaIgnored) {\n    return alphaInRange;\n  }\n  if (!alphaData && alphaInRange) {\n    return true;\n  }\n  if (inRange(data[index], redIgnored, threshold) && inRange(data[index + 1], greenIgnored, threshold) && inRange(data[index + 2], blueIgnored, threshold) && alphaInRange) {\n    return true;\n  }\n  return false;\n}\nvar DEFAULT_DOMINANT_DIVIDER = 24;\nfunction dominantAlgorithm(arr, len, options) {\n  var colorHash = {};\n  var divider = options.dominantDivider || DEFAULT_DOMINANT_DIVIDER;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  var max = [0, 0, 0, 0, 0];\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    var key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);\n    if (colorHash[key]) {\n      colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];\n    } else {\n      colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n    }\n    if (max[4] < colorHash[key][4]) {\n      max = colorHash[key];\n    }\n  }\n  var redTotal = max[0];\n  var greenTotal = max[1];\n  var blueTotal = max[2];\n  var alphaTotal = max[3];\n  var count = max[4];\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction simpleAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  for (var i = 0; i < len; i += step) {\n    var alpha = arr[i + 3];\n    var red = arr[i] * alpha;\n    var green = arr[i + 1] * alpha;\n    var blue = arr[i + 2] * alpha;\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red;\n    greenTotal += green;\n    blueTotal += blue;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction sqrtAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red * red * alpha;\n    greenTotal += green * green * alpha;\n    blueTotal += blue * blue * alpha;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction getDefaultColor(options) {\n  return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n  return options[name] === undefined ? defaultValue : options[name];\n}\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n  return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n  if (isInstanceOfHTMLImageElement(resource)) {\n    var width = resource.naturalWidth;\n    var height = resource.naturalHeight;\n    // For SVG images with only viewBox attribute\n    if (!resource.naturalWidth && isSvg(resource.src)) {\n      width = height = MAX_SIZE;\n    }\n    return {\n      width: width,\n      height: height\n    };\n  }\n  if (isInstanceOfHTMLVideoElement(resource)) {\n    return {\n      width: resource.videoWidth,\n      height: resource.videoHeight\n    };\n  }\n  if (isInstanceOfVideoFrame(resource)) {\n    return {\n      width: resource.codedWidth,\n      height: resource.codedHeight\n    };\n  }\n  return {\n    width: resource.width,\n    height: resource.height\n  };\n}\nfunction getSrc(resource) {\n  if (isInstanceOfHTMLCanvasElement(resource)) {\n    return 'canvas';\n  }\n  if (isInstanceOfOffscreenCanvas(resource)) {\n    return 'offscreencanvas';\n  }\n  if (isInstanceOfVideoFrame(resource)) {\n    return 'videoframe';\n  }\n  if (isInstanceOfImageBitmap(resource)) {\n    return 'imagebitmap';\n  }\n  return resource.src;\n}\nfunction isInstanceOfHTMLImageElement(resource) {\n  return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\n}\nvar hasOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\nfunction isInstanceOfOffscreenCanvas(resource) {\n  return hasOffscreenCanvas && resource instanceof OffscreenCanvas;\n}\nfunction isInstanceOfHTMLVideoElement(resource) {\n  return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\n}\nfunction isInstanceOfVideoFrame(resource) {\n  return typeof VideoFrame !== 'undefined' && resource instanceof VideoFrame;\n}\nfunction isInstanceOfHTMLCanvasElement(resource) {\n  return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\n}\nfunction isInstanceOfImageBitmap(resource) {\n  return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n  var srcLeft = getOption(options, 'left', 0);\n  var srcTop = getOption(options, 'top', 0);\n  var srcWidth = getOption(options, 'width', originalSize.width);\n  var srcHeight = getOption(options, 'height', originalSize.height);\n  var destWidth = srcWidth;\n  var destHeight = srcHeight;\n  if (options.mode === 'precision') {\n    return {\n      srcLeft: srcLeft,\n      srcTop: srcTop,\n      srcWidth: srcWidth,\n      srcHeight: srcHeight,\n      destWidth: destWidth,\n      destHeight: destHeight\n    };\n  }\n  var factor;\n  if (srcWidth > srcHeight) {\n    factor = srcWidth / srcHeight;\n    destWidth = MAX_SIZE;\n    destHeight = Math.round(destWidth / factor);\n  } else {\n    factor = srcHeight / srcWidth;\n    destHeight = MAX_SIZE;\n    destWidth = Math.round(destHeight / factor);\n  }\n  if (destWidth > srcWidth || destHeight > srcHeight || destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n    destWidth = srcWidth;\n    destHeight = srcHeight;\n  }\n  return {\n    srcLeft: srcLeft,\n    srcTop: srcTop,\n    srcWidth: srcWidth,\n    srcHeight: srcHeight,\n    destWidth: destWidth,\n    destHeight: destHeight\n  };\n}\nvar isWebWorkers = typeof window === 'undefined';\nfunction makeCanvas() {\n  if (isWebWorkers) {\n    return hasOffscreenCanvas ? new OffscreenCanvas(1, 1) : null;\n  }\n  return document.createElement('canvas');\n}\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction getError(message) {\n  return Error(ERROR_PREFIX + message);\n}\nfunction outputError(error, silent) {\n  if (!silent) {\n    console.error(error);\n  }\n}\nvar FastAverageColor = /** @class */function () {\n  function FastAverageColor() {\n    this.canvas = null;\n    this.ctx = null;\n  }\n  FastAverageColor.prototype.getColorAsync = function (resource, options) {\n    if (!resource) {\n      return Promise.reject(getError('call .getColorAsync() without resource'));\n    }\n    if (typeof resource === 'string') {\n      // Web workers\n      if (typeof Image === 'undefined') {\n        return Promise.reject(getError('resource as string is not supported in this environment'));\n      }\n      var img = new Image();\n      img.crossOrigin = options && options.crossOrigin || '';\n      img.src = resource;\n      return this.bindImageEvents(img, options);\n    } else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\n      return this.bindImageEvents(resource, options);\n    } else {\n      var result = this.getColor(resource, options);\n      return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n    }\n  };\n  /**\n   * Get the average color from images, videos and canvas.\n   */\n  FastAverageColor.prototype.getColor = function (resource, options) {\n    options = options || {};\n    var defaultColor = getDefaultColor(options);\n    if (!resource) {\n      var error = getError('call .getColor() without resource');\n      outputError(error, options.silent);\n      return this.prepareResult(defaultColor, error);\n    }\n    var originalSize = getOriginalSize(resource);\n    var size = prepareSizeAndPosition(originalSize, options);\n    if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n      var error = getError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"));\n      outputError(error, options.silent);\n      return this.prepareResult(defaultColor, error);\n    }\n    if (!this.canvas) {\n      this.canvas = makeCanvas();\n      if (!this.canvas) {\n        var error = getError('OffscreenCanvas is not supported in this browser');\n        outputError(error, options.silent);\n        return this.prepareResult(defaultColor, error);\n      }\n    }\n    if (!this.ctx) {\n      this.ctx = this.canvas.getContext('2d', {\n        willReadFrequently: true\n      });\n      if (!this.ctx) {\n        var error = getError('Canvas Context 2D is not supported in this browser');\n        outputError(error, options.silent);\n        return this.prepareResult(defaultColor);\n      }\n      this.ctx.imageSmoothingEnabled = false;\n    }\n    this.canvas.width = size.destWidth;\n    this.canvas.height = size.destHeight;\n    try {\n      this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n      this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n      var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n      return this.prepareResult(this.getColorFromArray4(bitmapData, options));\n    } catch (originalError) {\n      var error = getError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"));\n      outputError(error, options.silent);\n      if (!options.silent) {\n        console.error(originalError);\n      }\n      return this.prepareResult(defaultColor, error);\n    }\n  };\n  /**\n   * Get the average color from a array when 1 pixel is 4 bytes.\n   */\n  FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n    options = options || {};\n    var bytesPerPixel = 4;\n    var arrLength = arr.length;\n    var defaultColor = getDefaultColor(options);\n    if (arrLength < bytesPerPixel) {\n      return defaultColor;\n    }\n    var len = arrLength - arrLength % bytesPerPixel;\n    var step = (options.step || 1) * bytesPerPixel;\n    var algorithm;\n    switch (options.algorithm || 'sqrt') {\n      case 'simple':\n        algorithm = simpleAlgorithm;\n        break;\n      case 'sqrt':\n        algorithm = sqrtAlgorithm;\n        break;\n      case 'dominant':\n        algorithm = dominantAlgorithm;\n        break;\n      default:\n        throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\n    }\n    return algorithm(arr, len, {\n      defaultColor: defaultColor,\n      ignoredColor: prepareIgnoredColor(options.ignoredColor),\n      step: step,\n      dominantDivider: options.dominantDivider\n    });\n  };\n  /**\n   * Get color data from value ([r, g, b, a]).\n   */\n  FastAverageColor.prototype.prepareResult = function (value, error) {\n    var rgb = value.slice(0, 3);\n    var rgba = [value[0], value[1], value[2], value[3] / 255];\n    var isDarkColor = isDark(value);\n    return {\n      value: [value[0], value[1], value[2], value[3]],\n      rgb: 'rgb(' + rgb.join(',') + ')',\n      rgba: 'rgba(' + rgba.join(',') + ')',\n      hex: arrayToHex(rgb),\n      hexa: arrayToHex(value),\n      isDark: isDarkColor,\n      isLight: !isDarkColor,\n      error: error\n    };\n  };\n  /**\n   * Destroy the instance.\n   */\n  FastAverageColor.prototype.destroy = function () {\n    if (this.canvas) {\n      this.canvas.width = 1;\n      this.canvas.height = 1;\n      this.canvas = null;\n    }\n    this.ctx = null;\n  };\n  FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var onload = function () {\n        unbindEvents();\n        var result = _this.getColor(resource, options);\n        if (result.error) {\n          reject(result.error);\n        } else {\n          resolve(result);\n        }\n      };\n      var onerror = function () {\n        unbindEvents();\n        reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\"\")));\n      };\n      var onabort = function () {\n        unbindEvents();\n        reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\n      };\n      var unbindEvents = function () {\n        resource.removeEventListener('load', onload);\n        resource.removeEventListener('error', onerror);\n        resource.removeEventListener('abort', onabort);\n      };\n      resource.addEventListener('load', onload);\n      resource.addEventListener('error', onerror);\n      resource.addEventListener('abort', onabort);\n    });\n  };\n  return FastAverageColor;\n}();\nexport { FastAverageColor };"],
  "mappings": ";;;;AACA,SAAS,MAAM,KAAK;AAClB,MAAI,MAAM,IAAI,SAAS,EAAE;AACzB,SAAO,IAAI,WAAW,IAAI,MAAM,MAAM;AACxC;AACA,SAAS,WAAW,KAAK;AACvB,SAAO,MAAM,IAAI,IAAI,KAAK,EAAE,KAAK,EAAE;AACrC;AACA,SAAS,OAAO,OAAO;AAErB,MAAI,UAAU,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,IAAI,OAAO;AAClE,SAAO,SAAS;AAClB;AACA,SAAS,oBAAoB,OAAO;AAClC,MAAI,CAAC,OAAO;AACV,WAAO,CAAC;AAAA,EACV;AACA,SAAO,WAAW,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC3C;AACA,SAAS,WAAW,OAAO;AACzB,SAAO,MAAM,QAAQ,MAAM,CAAC,CAAC;AAC/B;AACA,SAAS,eAAe,MAAM,OAAO,cAAc;AACjD,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,QAAI,wBAAwB,MAAM,OAAO,aAAa,CAAC,CAAC,GAAG;AACzD,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,wBAAwB,MAAM,OAAO,cAAc;AAC1D,UAAQ,aAAa,QAAQ;AAAA,IAC3B,KAAK;AAEH,UAAI,kBAAkB,MAAM,OAAO,YAAY,GAAG;AAChD,eAAO;AAAA,MACT;AACA;AAAA,IACF,KAAK;AAEH,UAAI,mBAAmB,MAAM,OAAO,YAAY,GAAG;AACjD,eAAO;AAAA,MACT;AACA;AAAA,IACF,KAAK;AAEH,UAAI,gCAAgC,MAAM,OAAO,YAAY,GAAG;AAC9D,eAAO;AAAA,MACT;AACA;AAAA,IACF;AACE,aAAO;AAAA,EACX;AACF;AACA,SAAS,kBAAkB,MAAM,OAAO,cAAc;AAEpD,MAAI,KAAK,QAAQ,CAAC,MAAM,KAAK;AAC3B,WAAO;AAAA,EACT;AACA,MAAI,KAAK,KAAK,MAAM,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC,GAAG;AACjH,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,SAAS,mBAAmB,MAAM,OAAO,cAAc;AACrD,MAAI,KAAK,QAAQ,CAAC,KAAK,aAAa,CAAC,GAAG;AACtC,WAAO,KAAK,KAAK,MAAM,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC;AAAA,EAC5J;AAEA,SAAO,KAAK,QAAQ,CAAC,MAAM,aAAa,CAAC;AAC3C;AACA,SAAS,QAAQ,gBAAgB,uBAAuB,OAAO;AAC7D,SAAO,kBAAkB,wBAAwB,SAAS,kBAAkB,wBAAwB;AACtG;AACA,SAAS,gCAAgC,MAAM,OAAO,cAAc;AAClE,MAAI,aAAa,aAAa,CAAC;AAC/B,MAAI,eAAe,aAAa,CAAC;AACjC,MAAI,cAAc,aAAa,CAAC;AAChC,MAAI,eAAe,aAAa,CAAC;AACjC,MAAI,YAAY,aAAa,CAAC;AAC9B,MAAI,YAAY,KAAK,QAAQ,CAAC;AAC9B,MAAI,eAAe,QAAQ,WAAW,cAAc,SAAS;AAC7D,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AACA,MAAI,CAAC,aAAa,cAAc;AAC9B,WAAO;AAAA,EACT;AACA,MAAI,QAAQ,KAAK,KAAK,GAAG,YAAY,SAAS,KAAK,QAAQ,KAAK,QAAQ,CAAC,GAAG,cAAc,SAAS,KAAK,QAAQ,KAAK,QAAQ,CAAC,GAAG,aAAa,SAAS,KAAK,cAAc;AACxK,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAI,2BAA2B;AAC/B,SAAS,kBAAkB,KAAK,KAAK,SAAS;AAC5C,MAAI,YAAY,CAAC;AACjB,MAAI,UAAU,QAAQ,mBAAmB;AACzC,MAAI,eAAe,QAAQ;AAC3B,MAAI,OAAO,QAAQ;AACnB,MAAI,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACxB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK,MAAM;AAClC,QAAI,MAAM,IAAI,CAAC;AACf,QAAI,QAAQ,IAAI,IAAI,CAAC;AACrB,QAAI,OAAO,IAAI,IAAI,CAAC;AACpB,QAAI,QAAQ,IAAI,IAAI,CAAC;AACrB,QAAI,gBAAgB,eAAe,KAAK,GAAG,YAAY,GAAG;AACxD;AAAA,IACF;AACA,QAAI,MAAM,KAAK,MAAM,MAAM,OAAO,IAAI,MAAM,KAAK,MAAM,QAAQ,OAAO,IAAI,MAAM,KAAK,MAAM,OAAO,OAAO;AACzG,QAAI,UAAU,GAAG,GAAG;AAClB,gBAAU,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,IAAI,MAAM,OAAO,UAAU,GAAG,EAAE,CAAC,IAAI,QAAQ,OAAO,UAAU,GAAG,EAAE,CAAC,IAAI,OAAO,OAAO,UAAU,GAAG,EAAE,CAAC,IAAI,OAAO,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC;AAAA,IAC1K,OAAO;AACL,gBAAU,GAAG,IAAI,CAAC,MAAM,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,CAAC;AAAA,IACtE;AACA,QAAI,IAAI,CAAC,IAAI,UAAU,GAAG,EAAE,CAAC,GAAG;AAC9B,YAAM,UAAU,GAAG;AAAA,IACrB;AAAA,EACF;AACA,MAAI,WAAW,IAAI,CAAC;AACpB,MAAI,aAAa,IAAI,CAAC;AACtB,MAAI,YAAY,IAAI,CAAC;AACrB,MAAI,aAAa,IAAI,CAAC;AACtB,MAAI,QAAQ,IAAI,CAAC;AACjB,SAAO,aAAa,CAAC,KAAK,MAAM,WAAW,UAAU,GAAG,KAAK,MAAM,aAAa,UAAU,GAAG,KAAK,MAAM,YAAY,UAAU,GAAG,KAAK,MAAM,aAAa,KAAK,CAAC,IAAI,QAAQ;AAC7K;AACA,SAAS,gBAAgB,KAAK,KAAK,SAAS;AAC1C,MAAI,WAAW;AACf,MAAI,aAAa;AACjB,MAAI,YAAY;AAChB,MAAI,aAAa;AACjB,MAAI,QAAQ;AACZ,MAAI,eAAe,QAAQ;AAC3B,MAAI,OAAO,QAAQ;AACnB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK,MAAM;AAClC,QAAI,QAAQ,IAAI,IAAI,CAAC;AACrB,QAAI,MAAM,IAAI,CAAC,IAAI;AACnB,QAAI,QAAQ,IAAI,IAAI,CAAC,IAAI;AACzB,QAAI,OAAO,IAAI,IAAI,CAAC,IAAI;AACxB,QAAI,gBAAgB,eAAe,KAAK,GAAG,YAAY,GAAG;AACxD;AAAA,IACF;AACA,gBAAY;AACZ,kBAAc;AACd,iBAAa;AACb,kBAAc;AACd;AAAA,EACF;AACA,SAAO,aAAa,CAAC,KAAK,MAAM,WAAW,UAAU,GAAG,KAAK,MAAM,aAAa,UAAU,GAAG,KAAK,MAAM,YAAY,UAAU,GAAG,KAAK,MAAM,aAAa,KAAK,CAAC,IAAI,QAAQ;AAC7K;AACA,SAAS,cAAc,KAAK,KAAK,SAAS;AACxC,MAAI,WAAW;AACf,MAAI,aAAa;AACjB,MAAI,YAAY;AAChB,MAAI,aAAa;AACjB,MAAI,QAAQ;AACZ,MAAI,eAAe,QAAQ;AAC3B,MAAI,OAAO,QAAQ;AACnB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK,MAAM;AAClC,QAAI,MAAM,IAAI,CAAC;AACf,QAAI,QAAQ,IAAI,IAAI,CAAC;AACrB,QAAI,OAAO,IAAI,IAAI,CAAC;AACpB,QAAI,QAAQ,IAAI,IAAI,CAAC;AACrB,QAAI,gBAAgB,eAAe,KAAK,GAAG,YAAY,GAAG;AACxD;AAAA,IACF;AACA,gBAAY,MAAM,MAAM;AACxB,kBAAc,QAAQ,QAAQ;AAC9B,iBAAa,OAAO,OAAO;AAC3B,kBAAc;AACd;AAAA,EACF;AACA,SAAO,aAAa,CAAC,KAAK,MAAM,KAAK,KAAK,WAAW,UAAU,CAAC,GAAG,KAAK,MAAM,KAAK,KAAK,aAAa,UAAU,CAAC,GAAG,KAAK,MAAM,KAAK,KAAK,YAAY,UAAU,CAAC,GAAG,KAAK,MAAM,aAAa,KAAK,CAAC,IAAI,QAAQ;AAC9M;AACA,SAAS,gBAAgB,SAAS;AAChC,SAAO,UAAU,SAAS,gBAAgB,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AACxD;AACA,SAAS,UAAU,SAAS,MAAM,cAAc;AAC9C,SAAO,QAAQ,IAAI,MAAM,SAAY,eAAe,QAAQ,IAAI;AAClE;AACA,IAAI,WAAW;AACf,IAAI,WAAW;AACf,SAAS,MAAM,UAAU;AACvB,SAAO,SAAS,OAAO,cAAc,MAAM;AAC7C;AACA,SAAS,gBAAgB,UAAU;AACjC,MAAI,6BAA6B,QAAQ,GAAG;AAC1C,QAAI,QAAQ,SAAS;AACrB,QAAI,SAAS,SAAS;AAEtB,QAAI,CAAC,SAAS,gBAAgB,MAAM,SAAS,GAAG,GAAG;AACjD,cAAQ,SAAS;AAAA,IACnB;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,MAAI,6BAA6B,QAAQ,GAAG;AAC1C,WAAO;AAAA,MACL,OAAO,SAAS;AAAA,MAChB,QAAQ,SAAS;AAAA,IACnB;AAAA,EACF;AACA,MAAI,uBAAuB,QAAQ,GAAG;AACpC,WAAO;AAAA,MACL,OAAO,SAAS;AAAA,MAChB,QAAQ,SAAS;AAAA,IACnB;AAAA,EACF;AACA,SAAO;AAAA,IACL,OAAO,SAAS;AAAA,IAChB,QAAQ,SAAS;AAAA,EACnB;AACF;AACA,SAAS,OAAO,UAAU;AACxB,MAAI,8BAA8B,QAAQ,GAAG;AAC3C,WAAO;AAAA,EACT;AACA,MAAI,4BAA4B,QAAQ,GAAG;AACzC,WAAO;AAAA,EACT;AACA,MAAI,uBAAuB,QAAQ,GAAG;AACpC,WAAO;AAAA,EACT;AACA,MAAI,wBAAwB,QAAQ,GAAG;AACrC,WAAO;AAAA,EACT;AACA,SAAO,SAAS;AAClB;AACA,SAAS,6BAA6B,UAAU;AAC9C,SAAO,OAAO,qBAAqB,eAAe,oBAAoB;AACxE;AACA,IAAI,qBAAqB,OAAO,oBAAoB;AACpD,SAAS,4BAA4B,UAAU;AAC7C,SAAO,sBAAsB,oBAAoB;AACnD;AACA,SAAS,6BAA6B,UAAU;AAC9C,SAAO,OAAO,qBAAqB,eAAe,oBAAoB;AACxE;AACA,SAAS,uBAAuB,UAAU;AACxC,SAAO,OAAO,eAAe,eAAe,oBAAoB;AAClE;AACA,SAAS,8BAA8B,UAAU;AAC/C,SAAO,OAAO,sBAAsB,eAAe,oBAAoB;AACzE;AACA,SAAS,wBAAwB,UAAU;AACzC,SAAO,OAAO,gBAAgB,eAAe,oBAAoB;AACnE;AACA,SAAS,uBAAuB,cAAc,SAAS;AACrD,MAAI,UAAU,UAAU,SAAS,QAAQ,CAAC;AAC1C,MAAI,SAAS,UAAU,SAAS,OAAO,CAAC;AACxC,MAAI,WAAW,UAAU,SAAS,SAAS,aAAa,KAAK;AAC7D,MAAI,YAAY,UAAU,SAAS,UAAU,aAAa,MAAM;AAChE,MAAI,YAAY;AAChB,MAAI,aAAa;AACjB,MAAI,QAAQ,SAAS,aAAa;AAChC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,MAAI;AACJ,MAAI,WAAW,WAAW;AACxB,aAAS,WAAW;AACpB,gBAAY;AACZ,iBAAa,KAAK,MAAM,YAAY,MAAM;AAAA,EAC5C,OAAO;AACL,aAAS,YAAY;AACrB,iBAAa;AACb,gBAAY,KAAK,MAAM,aAAa,MAAM;AAAA,EAC5C;AACA,MAAI,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,aAAa,UAAU;AACnG,gBAAY;AACZ,iBAAa;AAAA,EACf;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AACA,IAAI,eAAe,OAAO,WAAW;AACrC,SAAS,aAAa;AACpB,MAAI,cAAc;AAChB,WAAO,qBAAqB,IAAI,gBAAgB,GAAG,CAAC,IAAI;AAAA,EAC1D;AACA,SAAO,SAAS,cAAc,QAAQ;AACxC;AACA,IAAI,eAAe;AACnB,SAAS,SAAS,SAAS;AACzB,SAAO,MAAM,eAAe,OAAO;AACrC;AACA,SAAS,YAAY,OAAO,QAAQ;AAClC,MAAI,CAAC,QAAQ;AACX,YAAQ,MAAM,KAAK;AAAA,EACrB;AACF;AACA,IAAI;AAAA;AAAA,EAAgC,WAAY;AAC9C,aAASA,oBAAmB;AAC1B,WAAK,SAAS;AACd,WAAK,MAAM;AAAA,IACb;AACA,IAAAA,kBAAiB,UAAU,gBAAgB,SAAU,UAAU,SAAS;AACtE,UAAI,CAAC,UAAU;AACb,eAAO,QAAQ,OAAO,SAAS,wCAAwC,CAAC;AAAA,MAC1E;AACA,UAAI,OAAO,aAAa,UAAU;AAEhC,YAAI,OAAO,UAAU,aAAa;AAChC,iBAAO,QAAQ,OAAO,SAAS,yDAAyD,CAAC;AAAA,QAC3F;AACA,YAAI,MAAM,IAAI,MAAM;AACpB,YAAI,cAAc,WAAW,QAAQ,eAAe;AACpD,YAAI,MAAM;AACV,eAAO,KAAK,gBAAgB,KAAK,OAAO;AAAA,MAC1C,WAAW,6BAA6B,QAAQ,KAAK,CAAC,SAAS,UAAU;AACvE,eAAO,KAAK,gBAAgB,UAAU,OAAO;AAAA,MAC/C,OAAO;AACL,YAAI,SAAS,KAAK,SAAS,UAAU,OAAO;AAC5C,eAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,KAAK,IAAI,QAAQ,QAAQ,MAAM;AAAA,MAC7E;AAAA,IACF;AAIA,IAAAA,kBAAiB,UAAU,WAAW,SAAU,UAAU,SAAS;AACjE,gBAAU,WAAW,CAAC;AACtB,UAAI,eAAe,gBAAgB,OAAO;AAC1C,UAAI,CAAC,UAAU;AACb,YAAI,QAAQ,SAAS,mCAAmC;AACxD,oBAAY,OAAO,QAAQ,MAAM;AACjC,eAAO,KAAK,cAAc,cAAc,KAAK;AAAA,MAC/C;AACA,UAAI,eAAe,gBAAgB,QAAQ;AAC3C,UAAI,OAAO,uBAAuB,cAAc,OAAO;AACvD,UAAI,CAAC,KAAK,YAAY,CAAC,KAAK,aAAa,CAAC,KAAK,aAAa,CAAC,KAAK,YAAY;AAC5E,YAAI,QAAQ,SAAS,iCAAkC,OAAO,OAAO,QAAQ,GAAG,GAAI,CAAC;AACrF,oBAAY,OAAO,QAAQ,MAAM;AACjC,eAAO,KAAK,cAAc,cAAc,KAAK;AAAA,MAC/C;AACA,UAAI,CAAC,KAAK,QAAQ;AAChB,aAAK,SAAS,WAAW;AACzB,YAAI,CAAC,KAAK,QAAQ;AAChB,cAAI,QAAQ,SAAS,kDAAkD;AACvE,sBAAY,OAAO,QAAQ,MAAM;AACjC,iBAAO,KAAK,cAAc,cAAc,KAAK;AAAA,QAC/C;AAAA,MACF;AACA,UAAI,CAAC,KAAK,KAAK;AACb,aAAK,MAAM,KAAK,OAAO,WAAW,MAAM;AAAA,UACtC,oBAAoB;AAAA,QACtB,CAAC;AACD,YAAI,CAAC,KAAK,KAAK;AACb,cAAI,QAAQ,SAAS,oDAAoD;AACzE,sBAAY,OAAO,QAAQ,MAAM;AACjC,iBAAO,KAAK,cAAc,YAAY;AAAA,QACxC;AACA,aAAK,IAAI,wBAAwB;AAAA,MACnC;AACA,WAAK,OAAO,QAAQ,KAAK;AACzB,WAAK,OAAO,SAAS,KAAK;AAC1B,UAAI;AACF,aAAK,IAAI,UAAU,GAAG,GAAG,KAAK,WAAW,KAAK,UAAU;AACxD,aAAK,IAAI,UAAU,UAAU,KAAK,SAAS,KAAK,QAAQ,KAAK,UAAU,KAAK,WAAW,GAAG,GAAG,KAAK,WAAW,KAAK,UAAU;AAC5H,YAAI,aAAa,KAAK,IAAI,aAAa,GAAG,GAAG,KAAK,WAAW,KAAK,UAAU,EAAE;AAC9E,eAAO,KAAK,cAAc,KAAK,mBAAmB,YAAY,OAAO,CAAC;AAAA,MACxE,SAAS,eAAe;AACtB,YAAI,QAAQ,SAAS,sCAAsC,OAAO,OAAO,QAAQ,GAAG,+EAA+E,CAAC;AACpK,oBAAY,OAAO,QAAQ,MAAM;AACjC,YAAI,CAAC,QAAQ,QAAQ;AACnB,kBAAQ,MAAM,aAAa;AAAA,QAC7B;AACA,eAAO,KAAK,cAAc,cAAc,KAAK;AAAA,MAC/C;AAAA,IACF;AAIA,IAAAA,kBAAiB,UAAU,qBAAqB,SAAU,KAAK,SAAS;AACtE,gBAAU,WAAW,CAAC;AACtB,UAAI,gBAAgB;AACpB,UAAI,YAAY,IAAI;AACpB,UAAI,eAAe,gBAAgB,OAAO;AAC1C,UAAI,YAAY,eAAe;AAC7B,eAAO;AAAA,MACT;AACA,UAAI,MAAM,YAAY,YAAY;AAClC,UAAI,QAAQ,QAAQ,QAAQ,KAAK;AACjC,UAAI;AACJ,cAAQ,QAAQ,aAAa,QAAQ;AAAA,QACnC,KAAK;AACH,sBAAY;AACZ;AAAA,QACF,KAAK;AACH,sBAAY;AACZ;AAAA,QACF,KAAK;AACH,sBAAY;AACZ;AAAA,QACF;AACE,gBAAM,SAAS,GAAG,OAAO,QAAQ,WAAW,uBAAuB,CAAC;AAAA,MACxE;AACA,aAAO,UAAU,KAAK,KAAK;AAAA,QACzB;AAAA,QACA,cAAc,oBAAoB,QAAQ,YAAY;AAAA,QACtD;AAAA,QACA,iBAAiB,QAAQ;AAAA,MAC3B,CAAC;AAAA,IACH;AAIA,IAAAA,kBAAiB,UAAU,gBAAgB,SAAU,OAAO,OAAO;AACjE,UAAI,MAAM,MAAM,MAAM,GAAG,CAAC;AAC1B,UAAI,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,GAAG;AACxD,UAAI,cAAc,OAAO,KAAK;AAC9B,aAAO;AAAA,QACL,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,QAC9C,KAAK,SAAS,IAAI,KAAK,GAAG,IAAI;AAAA,QAC9B,MAAM,UAAU,KAAK,KAAK,GAAG,IAAI;AAAA,QACjC,KAAK,WAAW,GAAG;AAAA,QACnB,MAAM,WAAW,KAAK;AAAA,QACtB,QAAQ;AAAA,QACR,SAAS,CAAC;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAIA,IAAAA,kBAAiB,UAAU,UAAU,WAAY;AAC/C,UAAI,KAAK,QAAQ;AACf,aAAK,OAAO,QAAQ;AACpB,aAAK,OAAO,SAAS;AACrB,aAAK,SAAS;AAAA,MAChB;AACA,WAAK,MAAM;AAAA,IACb;AACA,IAAAA,kBAAiB,UAAU,kBAAkB,SAAU,UAAU,SAAS;AACxE,UAAI,QAAQ;AACZ,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,YAAI,SAAS,WAAY;AACvB,uBAAa;AACb,cAAI,SAAS,MAAM,SAAS,UAAU,OAAO;AAC7C,cAAI,OAAO,OAAO;AAChB,mBAAO,OAAO,KAAK;AAAA,UACrB,OAAO;AACL,oBAAQ,MAAM;AAAA,UAChB;AAAA,QACF;AACA,YAAI,UAAU,WAAY;AACxB,uBAAa;AACb,iBAAO,SAAS,wBAAyB,OAAO,SAAS,KAAK,GAAI,CAAC,CAAC;AAAA,QACtE;AACA,YAAI,UAAU,WAAY;AACxB,uBAAa;AACb,iBAAO,SAAS,UAAW,OAAO,SAAS,KAAK,mBAAoB,CAAC,CAAC;AAAA,QACxE;AACA,YAAI,eAAe,WAAY;AAC7B,mBAAS,oBAAoB,QAAQ,MAAM;AAC3C,mBAAS,oBAAoB,SAAS,OAAO;AAC7C,mBAAS,oBAAoB,SAAS,OAAO;AAAA,QAC/C;AACA,iBAAS,iBAAiB,QAAQ,MAAM;AACxC,iBAAS,iBAAiB,SAAS,OAAO;AAC1C,iBAAS,iBAAiB,SAAS,OAAO;AAAA,MAC5C,CAAC;AAAA,IACH;AACA,WAAOA;AAAA,EACT,EAAE;AAAA;",
  "names": ["FastAverageColor"]
}
